<header class="container flex items-center justify-end h-[80px] sm:h-[123px]">
  <nav>
    <ul class="flex items-center">
      <li>
        <a
          class="p-4 dark:text-gray-100 block text-lg font-montserrat group transition duration-300"
          href="#work"
          >Work
          <span
            class="block max-w-0 group-hover:max-w-full transition-all duration-500 h-0.5 bg-violet-300"
          ></span>
        </a>
      </li>
      <li>
        <a
          class="p-4 dark:text-gray-100 block text-lg font-montserrat group transition duration-300"
          href="#education"
          >Education
          <span
            class="block max-w-0 group-hover:max-w-full transition-all duration-500 h-0.5 bg-violet-300"
          ></span>
        </a>
      </li>
      <li>
        <a
          class="p-4 dark:text-gray-100 block text-lg font-montserrat group transition duration-300"
          href="#projects"
          >Projects
          <span
            class="block max-w-0 group-hover:max-w-full transition-all duration-500 h-0.5 bg-violet-300"
          ></span>
        </a>
      </li>
      <li>
        <button
          aria-label="theme-button"
          id="theme-button"
          class="dark:text-gray-100 rounded-lg p-4 ml-2 bg-slate-200 dark:bg-slate-800"
        >
          <svg
            id="moon-svg"
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="feather feather-moon"
            ><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
          <svg
            id="sun-svg"
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="feather feather-sun"
            ><circle cx="12" cy="12" r="5"></circle><line
              x1="12"
              y1="1"
              x2="12"
              y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line
              x1="4.22"
              y1="4.22"
              x2="5.64"
              y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"
            ></line><line x1="1" y1="12" x2="3" y2="12"></line><line
              x1="21"
              y1="12"
              x2="23"
              y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"
            ></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
          </svg>
        </button>
      </li>
    </ul>
  </nav>
</header>

<script>
  // Setup theme types
  const LS_THEME_KEY = "dc-theme";
  const themes = ["dark", "light"] as const;
  type ThemeTuple = typeof themes;
  type Theme = ThemeTuple[number];
  function isTheme(themeVal: string): themeVal is Theme {
    return themes.includes(themeVal as Theme);
  }

  // Get elements
  const moonSvg = document.getElementById("moon-svg");
  const sunSvg = document.getElementById("sun-svg");
  const themeButton = document.getElementById("theme-button");
  if (!themeButton) {
    throw new Error("Theme button not found");
  }

  // Theme button icon setter
  const setThemeIcon = (newTheme: Theme): void => {
    if (moonSvg && sunSvg) {
      if (newTheme === "dark") {
        moonSvg.classList.add("hidden");
        sunSvg.classList.remove("hidden");
      } else {
        moonSvg.classList.remove("hidden");
        sunSvg.classList.add("hidden");
      }
    }
  };

  // Theme setter
  const setTheme = (newTheme: Theme): void => {
    document.documentElement.setAttribute("data-theme", newTheme);
    window.localStorage.setItem(LS_THEME_KEY, newTheme);
    setThemeIcon(newTheme);
    theme = newTheme;
  };

  // Get initial theme
  let theme = ((): Theme => {
    if (typeof localStorage !== "undefined") {
      const lsTheme = localStorage.getItem(LS_THEME_KEY);
      if (lsTheme && isTheme(lsTheme)) {
        return lsTheme;
      }
    }
    if (window.matchMedia("(prefers-color-scheme: light)").matches) {
      return "light";
    }
    return "dark";
  })();
  // Set initial theme
  setTheme(theme);

  // Theme button handler
  const darkModeHandler = () => {
    const newTheme: Theme = theme === "dark" ? "light" : "dark";
    setTheme(newTheme);
  };

  // Add event listener to theme button
  themeButton.addEventListener("click", darkModeHandler);
</script>
